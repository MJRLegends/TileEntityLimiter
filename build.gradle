def minecraft_version="1.13.2"
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
import net.minecraftforge.gradle.common.task.SignJar

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'

version = '1.0.0'
group = 'com.mjrlegends.tileentitylimiter' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TileEntityLimiter'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    	mappings channel: 'snapshot', version: '20180921-1.13'
        runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tileentitylimiter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tileentitylimiter {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.219'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title": "tileentitylimiter",
                    "Specification-Vendor": "MJRLegends",
                    "Specification-Version": "1", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"MJRLegends",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

curseforge {
	apiKey = project.findProperty("curseforge_key")
	project {
		id = "311347"
		releaseType = "release"
		addGameVersion "${minecraft_version}"
		mainArtifact(jar) {

		}
	}
}

build.dependsOn signJar
tasks.build.dependsOn signJar
tasks.curseforge.dependsOn build